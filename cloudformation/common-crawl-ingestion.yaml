AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for Sea Batch Processing

Parameters:
  DefaultVpcId:
    Type: AWS::EC2::VPC::Id
    Description: "The default VPC ID to use for Batch resources."

Resources:
  SeaNewsArticlesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sea-news-articles

  WarcInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sea-warc-input

  BatchTaskECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: sea-batch-task-repo

  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [batch.amazonaws.com]
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref BatchExecutionRole]

  DefaultSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVpcId
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-1"

  DefaultSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVpcId
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-2"

  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AWS Batch compute environment
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: SPOT
        MinvCpus: 0
        MaxvCpus: 3
        DesiredvCpus: 3
        InstanceTypes: [t3.small]
        Subnets:
          - !Ref DefaultSubnet1
          - !Ref DefaultSubnet2
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
      ServiceRole: !GetAtt BatchServiceRole.Arn

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Priority: 1

  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sea-batch-task-repo:latest"
        Vcpus: 2
        Memory: 4096
        Command: ["python", "main.py"]
        Environment:
          - Name: OUTPUT_BUCKET
            Value: sea-news-articles
          - Name: INPUT_BUCKET
            Value: sea-warc-input
          - Name: IS_LOCAL
            Value: "false"
          - Name: BATCH_FILE_MANIFEST
            Value: batch_file_manifest_test.csv
        JobRoleArn: !GetAtt BatchExecutionRole.Arn
      RetryStrategy:
        Attempts: 2

  BatchSubmitterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSBatchFullAccess

  BatchSubmitterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt BatchSubmitterLambdaRole.Arn
      Runtime: python3.9
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          INPUT_BUCKET: sea-warc-input
          JOB_QUEUE: !Ref BatchJobQueue
          JOB_DEFINITION: !Ref BatchJobDefinition
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              batch = boto3.client('batch')
              input_bucket = os.environ['INPUT_BUCKET']
              job_queue = os.environ['JOB_QUEUE']
              job_definition = os.environ['JOB_DEFINITION']

              paginator = s3.get_paginator('list_objects_v2')
              for page in paginator.paginate(Bucket=input_bucket):
                  for obj in page.get('Contents', []):
                      key = obj['Key']
                      if not key.endswith('.txt'):
                          continue
                      manifest_uri = f's3://{input_bucket}/{key}'
                      response = batch.submit_job(
                          jobName=f"process-{key.replace('.txt','')}",
